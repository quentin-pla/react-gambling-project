{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Polling = require('./polling');\n\nvar util = require('util');\n/**\n * Module exports.\n */\n\n\nmodule.exports = XHR;\n/**\n * Ajax polling transport.\n *\n * @api public\n */\n\nfunction XHR(req) {\n  Polling.call(this, req);\n}\n/**\n * Inherits from Polling.\n */\n\n\nutil.inherits(XHR, Polling);\n/**\n * Overrides `onRequest` to handle `OPTIONS`..\n *\n * @param {http.IncomingMessage}\n * @api private\n */\n\nXHR.prototype.onRequest = function (req) {\n  if ('OPTIONS' === req.method) {\n    var res = req.res;\n    var headers = this.headers(req);\n    headers['Access-Control-Allow-Headers'] = 'Content-Type';\n    res.writeHead(200, headers);\n    res.end();\n  } else {\n    Polling.prototype.onRequest.call(this, req);\n  }\n};\n/**\n * Returns headers for a response.\n *\n * @param {http.IncomingMessage} request\n * @param {Object} extra headers\n * @api private\n */\n\n\nXHR.prototype.headers = function (req, headers) {\n  headers = headers || {};\n\n  if (req.headers.origin) {\n    headers['Access-Control-Allow-Credentials'] = 'true';\n    headers['Access-Control-Allow-Origin'] = req.headers.origin;\n  } else {\n    headers['Access-Control-Allow-Origin'] = '*';\n  }\n\n  return Polling.prototype.headers.call(this, req, headers);\n};","map":{"version":3,"sources":["/Users/obscurax/Documents/EÃÅtudes/Applications Web/react-gambling-project/node_modules/engine.io/lib/transports/polling-xhr.js"],"names":["Polling","require","util","module","exports","XHR","req","call","inherits","prototype","onRequest","method","res","headers","writeHead","end","origin"],"mappings":"AACA;;;AAIA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;AAEA;;;;;AAIAE,MAAM,CAACC,OAAP,GAAiBC,GAAjB;AAEA;;;;;;AAMA,SAASA,GAAT,CAAcC,GAAd,EAAmB;AACjBN,EAAAA,OAAO,CAACO,IAAR,CAAa,IAAb,EAAmBD,GAAnB;AACD;AAED;;;;;AAIAJ,IAAI,CAACM,QAAL,CAAcH,GAAd,EAAmBL,OAAnB;AAEA;;;;;;;AAOAK,GAAG,CAACI,SAAJ,CAAcC,SAAd,GAA0B,UAAUJ,GAAV,EAAe;AACvC,MAAI,cAAcA,GAAG,CAACK,MAAtB,EAA8B;AAC5B,QAAIC,GAAG,GAAGN,GAAG,CAACM,GAAd;AACA,QAAIC,OAAO,GAAG,KAAKA,OAAL,CAAaP,GAAb,CAAd;AACAO,IAAAA,OAAO,CAAC,8BAAD,CAAP,GAA0C,cAA1C;AACAD,IAAAA,GAAG,CAACE,SAAJ,CAAc,GAAd,EAAmBD,OAAnB;AACAD,IAAAA,GAAG,CAACG,GAAJ;AACD,GAND,MAMO;AACLf,IAAAA,OAAO,CAACS,SAAR,CAAkBC,SAAlB,CAA4BH,IAA5B,CAAiC,IAAjC,EAAuCD,GAAvC;AACD;AACF,CAVD;AAYA;;;;;;;;;AAQAD,GAAG,CAACI,SAAJ,CAAcI,OAAd,GAAwB,UAAUP,GAAV,EAAeO,OAAf,EAAwB;AAC9CA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,MAAIP,GAAG,CAACO,OAAJ,CAAYG,MAAhB,EAAwB;AACtBH,IAAAA,OAAO,CAAC,kCAAD,CAAP,GAA8C,MAA9C;AACAA,IAAAA,OAAO,CAAC,6BAAD,CAAP,GAAyCP,GAAG,CAACO,OAAJ,CAAYG,MAArD;AACD,GAHD,MAGO;AACLH,IAAAA,OAAO,CAAC,6BAAD,CAAP,GAAyC,GAAzC;AACD;;AAED,SAAOb,OAAO,CAACS,SAAR,CAAkBI,OAAlB,CAA0BN,IAA1B,CAA+B,IAA/B,EAAqCD,GAArC,EAA0CO,OAA1C,CAAP;AACD,CAXD","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar Polling = require('./polling');\nvar util = require('util');\n\n/**\n * Module exports.\n */\n\nmodule.exports = XHR;\n\n/**\n * Ajax polling transport.\n *\n * @api public\n */\n\nfunction XHR (req) {\n  Polling.call(this, req);\n}\n\n/**\n * Inherits from Polling.\n */\n\nutil.inherits(XHR, Polling);\n\n/**\n * Overrides `onRequest` to handle `OPTIONS`..\n *\n * @param {http.IncomingMessage}\n * @api private\n */\n\nXHR.prototype.onRequest = function (req) {\n  if ('OPTIONS' === req.method) {\n    var res = req.res;\n    var headers = this.headers(req);\n    headers['Access-Control-Allow-Headers'] = 'Content-Type';\n    res.writeHead(200, headers);\n    res.end();\n  } else {\n    Polling.prototype.onRequest.call(this, req);\n  }\n};\n\n/**\n * Returns headers for a response.\n *\n * @param {http.IncomingMessage} request\n * @param {Object} extra headers\n * @api private\n */\n\nXHR.prototype.headers = function (req, headers) {\n  headers = headers || {};\n\n  if (req.headers.origin) {\n    headers['Access-Control-Allow-Credentials'] = 'true';\n    headers['Access-Control-Allow-Origin'] = req.headers.origin;\n  } else {\n    headers['Access-Control-Allow-Origin'] = '*';\n  }\n\n  return Polling.prototype.headers.call(this, req, headers);\n};\n"]},"metadata":{},"sourceType":"script"}