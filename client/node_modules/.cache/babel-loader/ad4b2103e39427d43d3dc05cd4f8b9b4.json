{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Socket = require('./socket');\n\nvar Emitter = require('events').EventEmitter;\n\nvar parser = require('socket.io-parser');\n\nvar hasBin = require('has-binary2');\n\nvar debug = require('debug')('socket.io:namespace');\n/**\n * Module exports.\n */\n\n\nmodule.exports = exports = Namespace;\n/**\n * Blacklisted events.\n */\n\nexports.events = ['connect', // for symmetry with client\n'connection', 'newListener'];\n/**\n * Flags.\n */\n\nexports.flags = ['json', 'volatile', 'local'];\n/**\n * `EventEmitter#emit` reference.\n */\n\nvar emit = Emitter.prototype.emit;\n/**\n * Namespace constructor.\n *\n * @param {Server} server instance\n * @param {Socket} name\n * @api private\n */\n\nfunction Namespace(server, name) {\n  this.name = name;\n  this.server = server;\n  this.sockets = {};\n  this.connected = {};\n  this.fns = [];\n  this.ids = 0;\n  this.rooms = [];\n  this.flags = {};\n  this.initAdapter();\n}\n/**\n * Inherits from `EventEmitter`.\n */\n\n\nNamespace.prototype.__proto__ = Emitter.prototype;\n/**\n * Apply flags from `Socket`.\n */\n\nexports.flags.forEach(function (flag) {\n  Object.defineProperty(Namespace.prototype, flag, {\n    get: function () {\n      this.flags[flag] = true;\n      return this;\n    }\n  });\n});\n/**\n * Initializes the `Adapter` for this nsp.\n * Run upon changing adapter by `Server#adapter`\n * in addition to the constructor.\n *\n * @api private\n */\n\nNamespace.prototype.initAdapter = function () {\n  this.adapter = new (this.server.adapter())(this);\n};\n/**\n * Sets up namespace middleware.\n *\n * @return {Namespace} self\n * @api public\n */\n\n\nNamespace.prototype.use = function (fn) {\n  if (this.server.eio && this.name === '/') {\n    debug('removing initial packet');\n    delete this.server.eio.initialPacket;\n  }\n\n  this.fns.push(fn);\n  return this;\n};\n/**\n * Executes the middleware for an incoming client.\n *\n * @param {Socket} socket that will get added\n * @param {Function} fn last fn call in the middleware\n * @api private\n */\n\n\nNamespace.prototype.run = function (socket, fn) {\n  var fns = this.fns.slice(0);\n  if (!fns.length) return fn(null);\n\n  function run(i) {\n    fns[i](socket, function (err) {\n      // upon error, short-circuit\n      if (err) return fn(err); // if no middleware left, summon callback\n\n      if (!fns[i + 1]) return fn(null); // go on to next\n\n      run(i + 1);\n    });\n  }\n\n  run(0);\n};\n/**\n * Targets a room when emitting.\n *\n * @param {String} name\n * @return {Namespace} self\n * @api public\n */\n\n\nNamespace.prototype.to = Namespace.prototype.in = function (name) {\n  if (!~this.rooms.indexOf(name)) this.rooms.push(name);\n  return this;\n};\n/**\n * Adds a new client.\n *\n * @return {Socket}\n * @api private\n */\n\n\nNamespace.prototype.add = function (client, query, fn) {\n  debug('adding socket to nsp %s', this.name);\n  var socket = new Socket(this, client, query);\n  var self = this;\n  this.run(socket, function (err) {\n    process.nextTick(function () {\n      if ('open' == client.conn.readyState) {\n        if (err) return socket.error(err.data || err.message); // track socket\n\n        self.sockets[socket.id] = socket; // it's paramount that the internal `onconnect` logic\n        // fires before user-set events to prevent state order\n        // violations (such as a disconnection before the connection\n        // logic is complete)\n\n        socket.onconnect();\n        if (fn) fn(); // fire user-set events\n\n        self.emit('connect', socket);\n        self.emit('connection', socket);\n      } else {\n        debug('next called after client was closed - ignoring socket');\n      }\n    });\n  });\n  return socket;\n};\n/**\n * Removes a client. Called by each `Socket`.\n *\n * @api private\n */\n\n\nNamespace.prototype.remove = function (socket) {\n  if (this.sockets.hasOwnProperty(socket.id)) {\n    delete this.sockets[socket.id];\n  } else {\n    debug('ignoring remove for %s', socket.id);\n  }\n};\n/**\n * Emits to all clients.\n *\n * @return {Namespace} self\n * @api public\n */\n\n\nNamespace.prototype.emit = function (ev) {\n  if (~exports.events.indexOf(ev)) {\n    emit.apply(this, arguments);\n    return this;\n  } // set up packet object\n\n\n  var args = Array.prototype.slice.call(arguments);\n  var packet = {\n    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,\n    data: args\n  };\n\n  if ('function' == typeof args[args.length - 1]) {\n    throw new Error('Callbacks are not supported when broadcasting');\n  }\n\n  var rooms = this.rooms.slice(0);\n  var flags = Object.assign({}, this.flags); // reset flags\n\n  this.rooms = [];\n  this.flags = {};\n  this.adapter.broadcast(packet, {\n    rooms: rooms,\n    flags: flags\n  });\n  return this;\n};\n/**\n * Sends a `message` event to all clients.\n *\n * @return {Namespace} self\n * @api public\n */\n\n\nNamespace.prototype.send = Namespace.prototype.write = function () {\n  var args = Array.prototype.slice.call(arguments);\n  args.unshift('message');\n  this.emit.apply(this, args);\n  return this;\n};\n/**\n * Gets a list of clients.\n *\n * @return {Namespace} self\n * @api public\n */\n\n\nNamespace.prototype.clients = function (fn) {\n  if (!this.adapter) {\n    throw new Error('No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?');\n  }\n\n  this.adapter.clients(this.rooms, fn); // reset rooms for scenario:\n  // .in('room').clients() (GH-1978)\n\n  this.rooms = [];\n  return this;\n};\n/**\n * Sets the compress flag.\n *\n * @param {Boolean} compress if `true`, compresses the sending data\n * @return {Socket} self\n * @api public\n */\n\n\nNamespace.prototype.compress = function (compress) {\n  this.flags.compress = compress;\n  return this;\n};\n/**\n * Sets the binary flag\n *\n * @param {Boolean} Encode as if it has binary data if `true`, Encode as if it doesnt have binary data if `false`\n * @return {Socket} self\n * @api public\n */\n\n\nNamespace.prototype.binary = function (binary) {\n  this.flags.binary = binary;\n  return this;\n};","map":{"version":3,"sources":["/Users/obscurax/Documents/EÃÅtudes/Applications Web/react-gambling-project/node_modules/socket.io/lib/namespace.js"],"names":["Socket","require","Emitter","EventEmitter","parser","hasBin","debug","module","exports","Namespace","events","flags","emit","prototype","server","name","sockets","connected","fns","ids","rooms","initAdapter","__proto__","forEach","flag","Object","defineProperty","get","adapter","use","fn","eio","initialPacket","push","run","socket","slice","length","i","err","to","in","indexOf","add","client","query","self","process","nextTick","conn","readyState","error","data","message","id","onconnect","remove","hasOwnProperty","ev","apply","arguments","args","Array","call","packet","type","binary","undefined","BINARY_EVENT","EVENT","Error","assign","broadcast","send","write","unshift","clients","compress"],"mappings":"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","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar Socket = require('./socket');\nvar Emitter = require('events').EventEmitter;\nvar parser = require('socket.io-parser');\nvar hasBin = require('has-binary2');\nvar debug = require('debug')('socket.io:namespace');\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports = Namespace;\n\n/**\n * Blacklisted events.\n */\n\nexports.events = [\n  'connect',    // for symmetry with client\n  'connection',\n  'newListener'\n];\n\n/**\n * Flags.\n */\n\nexports.flags = [\n  'json',\n  'volatile',\n  'local'\n];\n\n/**\n * `EventEmitter#emit` reference.\n */\n\nvar emit = Emitter.prototype.emit;\n\n/**\n * Namespace constructor.\n *\n * @param {Server} server instance\n * @param {Socket} name\n * @api private\n */\n\nfunction Namespace(server, name){\n  this.name = name;\n  this.server = server;\n  this.sockets = {};\n  this.connected = {};\n  this.fns = [];\n  this.ids = 0;\n  this.rooms = [];\n  this.flags = {};\n  this.initAdapter();\n}\n\n/**\n * Inherits from `EventEmitter`.\n */\n\nNamespace.prototype.__proto__ = Emitter.prototype;\n\n/**\n * Apply flags from `Socket`.\n */\n\nexports.flags.forEach(function(flag){\n  Object.defineProperty(Namespace.prototype, flag, {\n    get: function() {\n      this.flags[flag] = true;\n      return this;\n    }\n  });\n});\n\n/**\n * Initializes the `Adapter` for this nsp.\n * Run upon changing adapter by `Server#adapter`\n * in addition to the constructor.\n *\n * @api private\n */\n\nNamespace.prototype.initAdapter = function(){\n  this.adapter = new (this.server.adapter())(this);\n};\n\n/**\n * Sets up namespace middleware.\n *\n * @return {Namespace} self\n * @api public\n */\n\nNamespace.prototype.use = function(fn){\n  if (this.server.eio && this.name === '/') {\n    debug('removing initial packet');\n    delete this.server.eio.initialPacket;\n  }\n  this.fns.push(fn);\n  return this;\n};\n\n/**\n * Executes the middleware for an incoming client.\n *\n * @param {Socket} socket that will get added\n * @param {Function} fn last fn call in the middleware\n * @api private\n */\n\nNamespace.prototype.run = function(socket, fn){\n  var fns = this.fns.slice(0);\n  if (!fns.length) return fn(null);\n\n  function run(i){\n    fns[i](socket, function(err){\n      // upon error, short-circuit\n      if (err) return fn(err);\n\n      // if no middleware left, summon callback\n      if (!fns[i + 1]) return fn(null);\n\n      // go on to next\n      run(i + 1);\n    });\n  }\n\n  run(0);\n};\n\n/**\n * Targets a room when emitting.\n *\n * @param {String} name\n * @return {Namespace} self\n * @api public\n */\n\nNamespace.prototype.to =\nNamespace.prototype.in = function(name){\n  if (!~this.rooms.indexOf(name)) this.rooms.push(name);\n  return this;\n};\n\n/**\n * Adds a new client.\n *\n * @return {Socket}\n * @api private\n */\n\nNamespace.prototype.add = function(client, query, fn){\n  debug('adding socket to nsp %s', this.name);\n  var socket = new Socket(this, client, query);\n  var self = this;\n  this.run(socket, function(err){\n    process.nextTick(function(){\n      if ('open' == client.conn.readyState) {\n        if (err) return socket.error(err.data || err.message);\n\n        // track socket\n        self.sockets[socket.id] = socket;\n\n        // it's paramount that the internal `onconnect` logic\n        // fires before user-set events to prevent state order\n        // violations (such as a disconnection before the connection\n        // logic is complete)\n        socket.onconnect();\n        if (fn) fn();\n\n        // fire user-set events\n        self.emit('connect', socket);\n        self.emit('connection', socket);\n      } else {\n        debug('next called after client was closed - ignoring socket');\n      }\n    });\n  });\n  return socket;\n};\n\n/**\n * Removes a client. Called by each `Socket`.\n *\n * @api private\n */\n\nNamespace.prototype.remove = function(socket){\n  if (this.sockets.hasOwnProperty(socket.id)) {\n    delete this.sockets[socket.id];\n  } else {\n    debug('ignoring remove for %s', socket.id);\n  }\n};\n\n/**\n * Emits to all clients.\n *\n * @return {Namespace} self\n * @api public\n */\n\nNamespace.prototype.emit = function(ev){\n  if (~exports.events.indexOf(ev)) {\n    emit.apply(this, arguments);\n    return this;\n  }\n  // set up packet object\n  var args = Array.prototype.slice.call(arguments);\n  var packet = {\n    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,\n    data: args\n  };\n\n  if ('function' == typeof args[args.length - 1]) {\n    throw new Error('Callbacks are not supported when broadcasting');\n  }\n\n  var rooms = this.rooms.slice(0);\n  var flags = Object.assign({}, this.flags);\n\n  // reset flags\n  this.rooms = [];\n  this.flags = {};\n\n  this.adapter.broadcast(packet, {\n    rooms: rooms,\n    flags: flags\n  });\n\n  return this;\n};\n\n/**\n * Sends a `message` event to all clients.\n *\n * @return {Namespace} self\n * @api public\n */\n\nNamespace.prototype.send =\nNamespace.prototype.write = function(){\n  var args = Array.prototype.slice.call(arguments);\n  args.unshift('message');\n  this.emit.apply(this, args);\n  return this;\n};\n\n/**\n * Gets a list of clients.\n *\n * @return {Namespace} self\n * @api public\n */\n\nNamespace.prototype.clients = function(fn){\n  if(!this.adapter){\n    throw new Error('No adapter for this namespace, are you trying to get the list of clients of a dynamic namespace?')\n  }\n  this.adapter.clients(this.rooms, fn);\n  // reset rooms for scenario:\n  // .in('room').clients() (GH-1978)\n  this.rooms = [];\n  return this;\n};\n\n/**\n * Sets the compress flag.\n *\n * @param {Boolean} compress if `true`, compresses the sending data\n * @return {Socket} self\n * @api public\n */\n\nNamespace.prototype.compress = function(compress){\n  this.flags.compress = compress;\n  return this;\n};\n\n/**\n * Sets the binary flag\n *\n * @param {Boolean} Encode as if it has binary data if `true`, Encode as if it doesnt have binary data if `false`\n * @return {Socket} self\n * @api public\n */\n\n Namespace.prototype.binary = function (binary) {\n   this.flags.binary = binary;\n   return this;\n };\n"]},"metadata":{},"sourceType":"script"}