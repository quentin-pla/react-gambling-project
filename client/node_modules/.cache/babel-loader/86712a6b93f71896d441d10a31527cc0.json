{"ast":null,"code":"import openSocket from 'socket.io-client';\n/* Le client se connecte à cette URL */\n\nconst socket = openSocket('http://localhost:3000');\n/* La classe \"ChatClient\" permet de communiquer avec le serveur de chat.\n\n  client = new ChatClient(\"pseudonyme\")\n  client.onMessages((messages) => {\n    // ajouter les messages à l'interface graphique\n  })\n  client.sendMessage(\"Bonjour à tous\")\n\n*/\n\nclass ChatClient {\n  // L'événement \"set-name\", emis depuis le constructeur, permet de changer le nom de l'utilisateur\n  constructor(username) {\n    socket.emit('set-name', username);\n  }\n  /* Le callback passé à onMessages sera appelé à chaque fois que le serveur nous envoie un tableau de messages.\n    Chaque message est composé d'un champ \"name\" (nom de l'emetteur) et \"text\" (texte du message).\n  */\n\n\n  onMessages(cb) {\n    socket.on('add-messages', messages => cb(messages));\n  }\n  /* Envoyer un message à l'aide de l'événement \"post-message\". Le message sera reçu dans le champ \"text\" d'un message\n    par tous les participants au chat, y compris le client qui l'a envoyé.\n  */\n\n\n  sendMessage(message) {\n    socket.emit('post-message', message);\n  }\n\n}\n\nexport { ChatClient };","map":{"version":3,"sources":["/Users/obscurax/Documents/Études/Applications Web/react-gambling-project/src/chat/ChatClient.js"],"names":["openSocket","socket","ChatClient","constructor","username","emit","onMessages","cb","on","messages","sendMessage","message"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA;;AACA,MAAOC,MAAM,GAAGD,UAAU,CAAC,uBAAD,CAA1B;AAEA;;;;;;;;;;AASA,MAAME,UAAN,CAAiB;AACf;AACAC,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpBH,IAAAA,MAAM,CAACI,IAAP,CAAY,UAAZ,EAAwBD,QAAxB;AACD;AAED;;;;;AAGAE,EAAAA,UAAU,CAACC,EAAD,EAAK;AACbN,IAAAA,MAAM,CAACO,EAAP,CAAU,cAAV,EAA2BC,QAAD,IAAcF,EAAE,CAACE,QAAD,CAA1C;AACD;AAED;;;;;AAGAC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnBV,IAAAA,MAAM,CAACI,IAAP,CAAY,cAAZ,EAA4BM,OAA5B;AACD;;AAlBc;;AAqBjB,SAAST,UAAT","sourcesContent":["import openSocket from 'socket.io-client';\n/* Le client se connecte à cette URL */\nconst  socket = openSocket('http://localhost:3000');\n\n/* La classe \"ChatClient\" permet de communiquer avec le serveur de chat.\n\n  client = new ChatClient(\"pseudonyme\")\n  client.onMessages((messages) => {\n    // ajouter les messages à l'interface graphique\n  })\n  client.sendMessage(\"Bonjour à tous\")\n\n*/\nclass ChatClient {\n  // L'événement \"set-name\", emis depuis le constructeur, permet de changer le nom de l'utilisateur\n  constructor(username) {\n    socket.emit('set-name', username)\n  }\n\n  /* Le callback passé à onMessages sera appelé à chaque fois que le serveur nous envoie un tableau de messages.\n    Chaque message est composé d'un champ \"name\" (nom de l'emetteur) et \"text\" (texte du message).\n  */\n  onMessages(cb) {\n    socket.on('add-messages', (messages) => cb(messages))\n  }\n\n  /* Envoyer un message à l'aide de l'événement \"post-message\". Le message sera reçu dans le champ \"text\" d'un message\n    par tous les participants au chat, y compris le client qui l'a envoyé.\n  */\n  sendMessage(message) {\n    socket.emit('post-message', message)\n  }\n}\n\nexport { ChatClient }\n"]},"metadata":{},"sourceType":"module"}