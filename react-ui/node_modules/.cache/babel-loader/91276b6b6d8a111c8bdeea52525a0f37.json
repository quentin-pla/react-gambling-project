{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar EventEmitter = require('events').EventEmitter;\n\nvar parser = require('engine.io-parser');\n\nvar util = require('util');\n\nvar debug = require('debug')('engine:transport');\n/**\n * Expose the constructor.\n */\n\n\nmodule.exports = Transport;\n/**\n * Noop function.\n *\n * @api private\n */\n\nfunction noop() {}\n/**\n * Transport constructor.\n *\n * @param {http.IncomingMessage} request\n * @api public\n */\n\n\nfunction Transport(req) {\n  this.readyState = 'open';\n  this.discarded = false;\n}\n/**\n * Inherits from EventEmitter.\n */\n\n\nutil.inherits(Transport, EventEmitter);\n/**\n * Flags the transport as discarded.\n *\n * @api private\n */\n\nTransport.prototype.discard = function () {\n  this.discarded = true;\n};\n/**\n * Called with an incoming HTTP request.\n *\n * @param {http.IncomingMessage} request\n * @api private\n */\n\n\nTransport.prototype.onRequest = function (req) {\n  debug('setting request');\n  this.req = req;\n};\n/**\n * Closes the transport.\n *\n * @api private\n */\n\n\nTransport.prototype.close = function (fn) {\n  if ('closed' === this.readyState || 'closing' === this.readyState) return;\n  this.readyState = 'closing';\n  this.doClose(fn || noop);\n};\n/**\n * Called with a transport error.\n *\n * @param {String} message error\n * @param {Object} error description\n * @api private\n */\n\n\nTransport.prototype.onError = function (msg, desc) {\n  if (this.listeners('error').length) {\n    var err = new Error(msg);\n    err.type = 'TransportError';\n    err.description = desc;\n    this.emit('error', err);\n  } else {\n    debug('ignored transport error %s (%s)', msg, desc);\n  }\n};\n/**\n * Called with parsed out a packets from the data stream.\n *\n * @param {Object} packet\n * @api private\n */\n\n\nTransport.prototype.onPacket = function (packet) {\n  this.emit('packet', packet);\n};\n/**\n * Called with the encoded packet data.\n *\n * @param {String} data\n * @api private\n */\n\n\nTransport.prototype.onData = function (data) {\n  this.onPacket(parser.decodePacket(data));\n};\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\n\nTransport.prototype.onClose = function () {\n  this.readyState = 'closed';\n  this.emit('close');\n};","map":{"version":3,"sources":["/Users/obscurax/Documents/EÃÅtudes/Applications Web/react-gambling-project/node_modules/engine.io/lib/transport.js"],"names":["EventEmitter","require","parser","util","debug","module","exports","Transport","noop","req","readyState","discarded","inherits","prototype","discard","onRequest","close","fn","doClose","onError","msg","desc","listeners","length","err","Error","type","description","emit","onPacket","packet","onData","data","decodePacket","onClose"],"mappings":"AACA;;;AAIA,IAAIA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAArC;;AACA,IAAIE,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAAP,CAAiB,kBAAjB,CAAZ;AAEA;;;;;AAIAI,MAAM,CAACC,OAAP,GAAiBC,SAAjB;AAEA;;;;;;AAMA,SAASC,IAAT,GAAiB,CAAE;AAEnB;;;;;;;;AAOA,SAASD,SAAT,CAAoBE,GAApB,EAAyB;AACvB,OAAKC,UAAL,GAAkB,MAAlB;AACA,OAAKC,SAAL,GAAiB,KAAjB;AACD;AAED;;;;;AAIAR,IAAI,CAACS,QAAL,CAAcL,SAAd,EAAyBP,YAAzB;AAEA;;;;;;AAMAO,SAAS,CAACM,SAAV,CAAoBC,OAApB,GAA8B,YAAY;AACxC,OAAKH,SAAL,GAAiB,IAAjB;AACD,CAFD;AAIA;;;;;;;;AAOAJ,SAAS,CAACM,SAAV,CAAoBE,SAApB,GAAgC,UAAUN,GAAV,EAAe;AAC7CL,EAAAA,KAAK,CAAC,iBAAD,CAAL;AACA,OAAKK,GAAL,GAAWA,GAAX;AACD,CAHD;AAKA;;;;;;;AAMAF,SAAS,CAACM,SAAV,CAAoBG,KAApB,GAA4B,UAAUC,EAAV,EAAc;AACxC,MAAI,aAAa,KAAKP,UAAlB,IAAgC,cAAc,KAAKA,UAAvD,EAAmE;AAEnE,OAAKA,UAAL,GAAkB,SAAlB;AACA,OAAKQ,OAAL,CAAaD,EAAE,IAAIT,IAAnB;AACD,CALD;AAOA;;;;;;;;;AAQAD,SAAS,CAACM,SAAV,CAAoBM,OAApB,GAA8B,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACjD,MAAI,KAAKC,SAAL,CAAe,OAAf,EAAwBC,MAA5B,EAAoC;AAClC,QAAIC,GAAG,GAAG,IAAIC,KAAJ,CAAUL,GAAV,CAAV;AACAI,IAAAA,GAAG,CAACE,IAAJ,GAAW,gBAAX;AACAF,IAAAA,GAAG,CAACG,WAAJ,GAAkBN,IAAlB;AACA,SAAKO,IAAL,CAAU,OAAV,EAAmBJ,GAAnB;AACD,GALD,MAKO;AACLpB,IAAAA,KAAK,CAAC,iCAAD,EAAoCgB,GAApC,EAAyCC,IAAzC,CAAL;AACD;AACF,CATD;AAWA;;;;;;;;AAOAd,SAAS,CAACM,SAAV,CAAoBgB,QAApB,GAA+B,UAAUC,MAAV,EAAkB;AAC/C,OAAKF,IAAL,CAAU,QAAV,EAAoBE,MAApB;AACD,CAFD;AAIA;;;;;;;;AAOAvB,SAAS,CAACM,SAAV,CAAoBkB,MAApB,GAA6B,UAAUC,IAAV,EAAgB;AAC3C,OAAKH,QAAL,CAAc3B,MAAM,CAAC+B,YAAP,CAAoBD,IAApB,CAAd;AACD,CAFD;AAIA;;;;;;;AAMAzB,SAAS,CAACM,SAAV,CAAoBqB,OAApB,GAA8B,YAAY;AACxC,OAAKxB,UAAL,GAAkB,QAAlB;AACA,OAAKkB,IAAL,CAAU,OAAV;AACD,CAHD","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar parser = require('engine.io-parser');\nvar util = require('util');\nvar debug = require('debug')('engine:transport');\n\n/**\n * Expose the constructor.\n */\n\nmodule.exports = Transport;\n\n/**\n * Noop function.\n *\n * @api private\n */\n\nfunction noop () {}\n\n/**\n * Transport constructor.\n *\n * @param {http.IncomingMessage} request\n * @api public\n */\n\nfunction Transport (req) {\n  this.readyState = 'open';\n  this.discarded = false;\n}\n\n/**\n * Inherits from EventEmitter.\n */\n\nutil.inherits(Transport, EventEmitter);\n\n/**\n * Flags the transport as discarded.\n *\n * @api private\n */\n\nTransport.prototype.discard = function () {\n  this.discarded = true;\n};\n\n/**\n * Called with an incoming HTTP request.\n *\n * @param {http.IncomingMessage} request\n * @api private\n */\n\nTransport.prototype.onRequest = function (req) {\n  debug('setting request');\n  this.req = req;\n};\n\n/**\n * Closes the transport.\n *\n * @api private\n */\n\nTransport.prototype.close = function (fn) {\n  if ('closed' === this.readyState || 'closing' === this.readyState) return;\n\n  this.readyState = 'closing';\n  this.doClose(fn || noop);\n};\n\n/**\n * Called with a transport error.\n *\n * @param {String} message error\n * @param {Object} error description\n * @api private\n */\n\nTransport.prototype.onError = function (msg, desc) {\n  if (this.listeners('error').length) {\n    var err = new Error(msg);\n    err.type = 'TransportError';\n    err.description = desc;\n    this.emit('error', err);\n  } else {\n    debug('ignored transport error %s (%s)', msg, desc);\n  }\n};\n\n/**\n * Called with parsed out a packets from the data stream.\n *\n * @param {Object} packet\n * @api private\n */\n\nTransport.prototype.onPacket = function (packet) {\n  this.emit('packet', packet);\n};\n\n/**\n * Called with the encoded packet data.\n *\n * @param {String} data\n * @api private\n */\n\nTransport.prototype.onData = function (data) {\n  this.onPacket(parser.decodePacket(data));\n};\n\n/**\n * Called upon transport close.\n *\n * @api private\n */\n\nTransport.prototype.onClose = function () {\n  this.readyState = 'closed';\n  this.emit('close');\n};\n"]},"metadata":{},"sourceType":"script"}